#include "Enemy_08.h"
#include"DxLib.h"
#include"Player.h"
#include"Jangeki_Base.h"
#include<math.h>

//コンストラクタ　   基底クラスのコンストラクタを呼ぶ　　　　 ｘ　ｙ　幅　　　高さ    属性
Enemy_08::Enemy_08(float x, float y, Jan_Type type) : EnemyBase(x, y, 90.0f, 90.0f, type)
{	
	speed = 7.0f;
	dir = 1;
	hp = 100;

	image = LoadGraph("images/tyokitest.png");

	Init_Jangeki();       //じゃん撃を用意

	Enemy_image = LoadGraph("images/stage08/Stage8_image.png");
}

//デストラクタ2
Enemy_08::~Enemy_08()
{

}


//更新
void Enemy_08::Update()
{
	//じゃん撃更新・生成
	Update_Jangeki();

	

	static bool move;
	old_x = x;
	
	if (x <= 20 + w / 2) move = true;
	if (x >= 1280 - 20 - w / 2) move = false;
	
	if (++frame_move % 180 ==0)
	{
		if (move == true) move = false;
		else move = true;
	}
	else
	{

	}

	if (move == true) x += speed;
	else x -= speed;

	
	//if (frame_move <= 180 && frame_move > 200) speed = 0;
	//else if (frame_move == 186) frame_move = 0;
	//else speed = 7.;


	

	/********************   ジャンプ関係   ********************/

	if (land_flg == true && GetRand(30) == 3)    //GetRand(30) == 3　のところがジャンプの条件
	{
		g_add = -21.5f;    //重力加速度をマイナス値に　　下げるほどジャンプ力アップ
		land_flg = false;  //地面についていない
	}

	y_add = (y - old_y) + g_add;  //今回の落下距離を設定

	//落下速度の制限
	if (y_add > static_cast<float>(MAX_LENGTH)) y_add = static_cast<float>(MAX_LENGTH);

	old_y = y;                    //1フレーム前のｙ座標
	y += y_add;                   //落下距離をｙ座標に加算する
	g_add = _GRAVITY;              //重力加速度を初期化する

	/**********************************************************/

}

//描画
void Enemy_08::Draw() const
{
	//中心から描画
	DrawRotaGraphF(x, y, 4.f, 0, Enemy_image, TRUE);

	//じゃん撃描画
	Draw_Jangeki();

	DrawFormatString(100, 200, 0x000000, "%f", x);
	DrawFormatString(100, 250, 0x000000, "%f", old_x);
}

//じゃん撃生成・更新
void Enemy_08::Update_Jangeki()
{
	int jan_count;

	//じゃん撃配列をひとつずつ
	for (jan_count = 0; jan_count < JANGEKI_MAX; jan_count++)
	{
		//配列の jan_count 番目がnullptr（空要素）ならそれ以上処理しない
		if (obj_jangeki[jan_count] == nullptr) break;

		obj_jangeki[jan_count]->Update();

		//画面外で削除する
		if (obj_jangeki[jan_count]->CheckScreenOut() == true)
		{
			DeleteJangeki(jan_count);
			jan_count--;
		}
	}

	/*********************** ↓↓ 発射・生成 ↓↓ ***********************/
	frame_count++;

	//配列の空要素
	if (jan_count < JANGEKI_MAX && obj_jangeki[jan_count] == nullptr)
	{
		float radius = 25.5f;   //半径
		float speed = -7.0f;     //スピード

		//ランダムな属性を生成
		Jan_Type type = static_cast<Jan_Type>(GetRand(2));


		//生成
		if (frame_count % 120 == 0) obj_jangeki[jan_count] = new Jangeki_Base(x, y, radius, speed, type);
	}
}