#include "Scene_Stage09.h"
#include"KeyManager.h"
#include"DxLib.h"
#include"Scene_GameOver.h"
#include "Scene_GameClear.h"
#include"Scene_Stage10.h"


//デバッグモード
#include"Debug_Manager.h"

//コンストラクタ
Scene_Stage09::Scene_Stage09(const Player* player)
{
	//プレイヤー情報が渡されていれば
	if (player != nullptr)
	{
		//情報を引き継いだプレイヤーを生成
		obj_player = new Player(*player);
	}
	else
	{
		//プレイヤーを生成
		obj_player = new Player(640, 360);
	}

	//敵を生成
	obj_enemy = new Enemy_09(1110, 480, Jan_Type::SCISSORS);

	reflection = new Jangeki_Reflection(0, 0, 0, 0, Jan_Type::ROCK);

	//床・壁の用意
	Init_Floor(STAGE_09_FLOOR);

	//一つずつ生成  STAGE_09_FLOOR 個分
	obj_floor[0] = new Floor(0, 700, 1280, 20);        //床
	obj_floor[1] = new Floor(0, 0, 20, 1720);           //壁（左）
	obj_floor[2] = new Floor(1260, 0, 20, 1720);           //壁（右）
	//足場   左側
	obj_floor[3] = new Floor(100, 500, 120, 20);
	obj_floor[4] = new Floor(300, 325, 120, 20);  
	obj_floor[5] = new Floor(100, 150, 120, 20); 
	//足場   右側
	obj_floor[6] = new Floor(1050, 500, 120, 20);
	obj_floor[7] = new Floor(850, 325, 120, 20);     
	obj_floor[8] = new Floor(1050, 150, 120, 20);    
	//足場   右側
	obj_floor[9] = new Floor(560, 420, 120, 20);
	obj_floor[10] = new Floor(560, 100, 120, 20);

}

//デストラクタ
Scene_Stage09::~Scene_Stage09()
{
}

//更新
void Scene_Stage09::Update()
{
	
	//接触じゃんけん開始前
	if (GetJanState() == Jan_State::BEFORE)
	{
		obj_player->Update();    // プレイヤー更新・操作可能

		//（playerが）敵の座標を取得
		obj_player->SetEnemyLocation(obj_enemy->GetX(), obj_enemy->GetY());

		obj_enemy->Update();     //敵キャラ更新・内部処理
		obj_enemy->reflection->Update_reflection();
				//プレイヤーの座標を取得
		obj_enemy->SetPlayerLocation(obj_player->GetX(), obj_player->GetY());
		obj_enemy->reflection->SetEnemyLocation(obj_enemy->GetX(), obj_enemy->GetY());
	}

	//接触じゃんけん処理
	Touch_Janken(obj_enemy, this);


	//playerのじゃん撃をとってくる
	Jangeki_Base** player_jangeki = obj_player->GetJangeki();

	//enemyのじゃん撃をとってくる
	Jangeki_Base** enemy_jangeki = obj_enemy->GetJangeki();

	//反射されたじゃん撃をとってくる
	Jangeki_Base** reflection_jangeki = obj_enemy->reflection->GetJangeki();
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//じゃん撃同士の当たり判定（プレイヤーじゃん撃目線）
	for (int p_count = 0; p_count < JANGEKI_MAX; p_count++)
	{
		if (player_jangeki[p_count] == nullptr) break;         //じゃん撃がない時は処理しない

		bool delete_player = false;       //プレイヤーじゃん撃削除フラグ　true:削除　false:削除しない

		for (int e_count = 0; e_count < JANGEKI_MAX; e_count++)
		{
			if (enemy_jangeki[e_count] == nullptr) break;         //じゃん撃がない時は処理しないuuuuuuuuuuuuuuuuuuuuuuu

			if (player_jangeki[p_count]->Hit_Jangeki(enemy_jangeki[e_count]) == true)
			{
				//有利属性チェック
				int result = player_jangeki[p_count]->CheckAdvantage(enemy_jangeki[e_count]);

				switch (result)
				{
				case 0:             //playerのじゃん撃が不利

					//player側のじゃん撃を削除
					delete_player = true;

					break;

				case 1:             //playerのじゃん撃が有利

					//enemy側のじゃん撃を削除
					obj_enemy->DeleteJangeki(e_count);
					e_count--;

					break;

				case 2:             //あいこ

					//player側のじゃん撃を削除
					if (Rflg == false) 
					{
						delete_player = true;
					}
					//enemy側のじゃん撃を削除
					obj_enemy->DeleteJangeki(e_count);
					e_count--;

					break;

				default:
					break;
				}
			}

		}

		//プレイヤーじゃん撃削除フラグがtrue
		if (delete_player == true)
		{
			//player側のじゃん撃を削除
			obj_player->DeleteJangeki(p_count);
			p_count--;
		}
	}



	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//playerじゃん撃とenemyの当たり判定
	for (int i = 0; i < JANGEKI_MAX; i++)
	{
		if (player_jangeki[i] == nullptr) break;         //じゃん撃がない時は処理しない

		//じゃん撃との当たり判定
		if (obj_enemy->Hit_Jangeki(player_jangeki[i]) == true)
		{
			
			obj_player->DeleteJangeki(i);     //当たったじゃん撃を削除
			i--;

			obj_enemy->reflection->trueFlg();

			//	//じゃん撃描画
			//	obj_enemy->Draw_Jangeki();
			//	obj_enemy->Update_Jangeki();

			//	Jan_Type enemy_type = obj_enemy->GetType();            //敵の属性
			//	Jan_Type jangeki_type = player_jangeki[i]->GetType();  //当たったじゃん撃の属性

			//	//不利属性のみダメージが入る
			//	switch (enemy_type)
			//	{
			//	case Jan_Type::ROCK:                           //敵の属性　グー

			//		//パーのじゃん撃のみ有効
			//		if (jangeki_type == Jan_Type::PAPER)
			//		{
			//			obj_enemy->ReceiveDamage(30);     //ダメージが入る
			//			obj_player->DeleteJangeki(i);     //当たったじゃん撃を削除
			//			i--;
			//		}

			//		break;

			//	case Jan_Type::SCISSORS:                       //敵の属性　チョキ

			//		//グーのじゃん撃のみ有効
			//		if (jangeki_type == Jan_Type::ROCK)
			//		{
			//			obj_enemy->ReceiveDamage(30);     //ダメージが入る
			//			obj_player->DeleteJangeki(i);     //当たったじゃん撃を削除
			//			i--;
			//		}
			//		break;

			//	case Jan_Type::PAPER:                          //敵の属性　パー

			//		//チョキのじゃん撃のみ有効
			//		if (jangeki_type == Jan_Type::SCISSORS)
			//		{
			//			obj_enemy->ReceiveDamage(30);     //ダメージが入る
			//			obj_player->DeleteJangeki(i);     //当たったじゃん撃を削除
			//			i--;
			//		}
			//		break;

			//	default:
			//		break;
			//	}
		}
		//obj_enemy->reflection->falseFlg();
	}


	//enemyじゃん撃とplayerの当たり判定
	for (int i = 0; i < JANGEKI_MAX; i++)
	{
		//じゃん撃がない時は処理しない
		if (enemy_jangeki[i] == nullptr) break;

		//じゃん撃との当たり判定
		if (obj_player->Hit_Jangeki(enemy_jangeki[i]) == true)
		{
			//ダメージを受ける（プレイヤー）
			obj_player->ReceiveDamage(30);

			//あたったじゃん撃を削除
			obj_enemy->DeleteJangeki(i);
			i--;
		}
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//反射じゃん撃当たり判定

	//反射されたじゃん撃とplayerじゃん撃の当たり判定
		for (int p_count = 0; p_count < JANGEKI_MAX; p_count++)
		{
			if (player_jangeki[p_count] == nullptr) break;         //じゃん撃がない時は処理しない

			bool delete_player = false;       //プレイヤーじゃん撃削除フラグ　true:削除　false:削除しない

			for (int r_count = 0; r_count < JANGEKI_MAX; r_count++)
			{
				if (reflection_jangeki[r_count] == nullptr) break;         //じゃん撃がない時は処理しない

				if (player_jangeki[p_count]->Hit_Jangeki(reflection_jangeki[r_count]) == true)
				{
					//有利属性チェック
					int result = player_jangeki[p_count]->CheckAdvantage(reflection_jangeki[r_count]);

					switch (result)
					{
					case 0:             //playerのじゃん撃が不利

						//player側のじゃん撃を削除
						delete_player = true;

						break;

					case 1:             //playerのじゃん撃が有利

						//enemy側のじゃん撃を削除
						Rflg = true;
						obj_enemy->reflection->Delete_reflectionJangeki(r_count);
						r_count--;

						//ホーミングを特殊生成
						obj_player->Create_Homing(p_count, player_jangeki[p_count]->GetX() , player_jangeki[p_count]->GetY(), player_jangeki[p_count]->GetR(), player_jangeki[p_count]->GetSpeed(), player_jangeki[p_count]->GetType());

						//delete_player = true;
						//obj_enemy->Homing();

						break;

					case 2:             //あいこ

						//player側のじゃん撃を削除
						delete_player = true;

						//enemy側のじゃん撃を削除
						obj_enemy->reflection->Delete_reflectionJangeki(r_count);
						r_count--;

						break;

					default:
						break;
					}
				}
			}


			//プレイヤーじゃん撃削除フラグがtrue
			if (delete_player == true)
			{
				//player側のじゃん撃を削除
				obj_player->DeleteJangeki(p_count);
				p_count--;

			}
		}


		//反射されたじゃん撃とプレイヤーの当たり判定
		for (int i = 0; i < JANGEKI_MAX; i++)
		{
			//じゃん撃がない時は処理しない
			if (reflection_jangeki[i] == nullptr) break;

			//じゃん撃との当たり判定
			if (obj_player->Hit_Jangeki(reflection_jangeki[i]) == true)
			{
				//ダメージを受ける（プレイヤー）
				obj_player->ReceiveDamage(30);

				//あたったじゃん撃を削除
				obj_enemy->reflection->Delete_reflectionJangeki(i);
				i--;
			}
		}

		//反射されたじゃん撃とenemyの当たり判定
		if (Rflg == true) {
			for (int i = 0; i < JANGEKI_MAX; i++)
			{
				//じゃん撃がない時は処理しない
				if (reflection_jangeki[i] == nullptr) break;

				//じゃん撃との当たり判定
				if (obj_enemy->Hit_Jangeki(reflection_jangeki[i]) == true)
				{
					//ダメージを受ける（プレイヤー）
					obj_enemy->ReceiveDamage(30);

					//あたったじゃん撃を削除
					obj_enemy->reflection->Delete_reflectionJangeki(i);
					i--;
					Rflg = false;
				}
			}
		}
		

	HitCtrl_Floor(obj_player, STAGE_09_FLOOR);     // player　床・壁判定
	HitCtrl_Floor(obj_enemy, STAGE_09_FLOOR);      // 敵　　　床・壁判定
}


//描画
void Scene_Stage09::Draw() const
{
	//HP表示
	DrawUI(obj_enemy->GetType(), obj_enemy->GetHP());
	//接触じゃんけんでない時
	if (GetJanState() == Jan_State::BEFORE)
	{

		obj_player->Draw();  //プレイヤー描画
		obj_enemy->Draw();   //敵キャラ描画
		obj_enemy->reflection->Draw_reflectionJangeki();


		//床・壁描画
		for (int i = 0; i < STAGE_09_FLOOR; i++)
		{
			if (obj_floor[i] == nullptr) break;
			obj_floor[i]->Draw();
		}

	}
	else
	{
		//接触時じゃんけん描画
		Draw_Janken();
	}

	DrawString(640, 360, "Stage09", 0xffffff);
}


//じゃんけん描画
void Scene_Stage09::Draw_Janken() const
{
	obj_janken->Draw();
}

//シーンの変更
AbstractScene* Scene_Stage09::ChangeScene()
{
	//"Debug_Manager.h" の #define DEBUG_OFF_09 をコメントアウトすると開発モード
#ifdef DEBUG_OFF_09

	//敵のHPが0以下
	if (obj_enemy->GetHP() < 0)
	{
		//ゲームクリアシーンへ切り替え
		return dynamic_cast<AbstractScene*> (new GameClearScene(10));
	}

	//プレイヤーのHPが0以下
	if (obj_player->GetHP() < 0)
	{
		//ゲームオーバーシーンへ切り替え
		return dynamic_cast<AbstractScene*> (new GameOverScene(9));
	}

#endif // DEBUG_OFF_09

	return this;
}

//じゃんけん終了後の挙動（プレイヤー勝ち）
void Scene_Stage09::AfterJanken_WIN()
{
	obj_player->SetX(100);
}

//じゃんけん終了後の挙動（プレイヤー負け）
void Scene_Stage09::AfterJanken_LOSE()
{
	obj_player->SetX(100);
}